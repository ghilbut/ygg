import os
import sys

# unix, linux, mac  : 'clear'
# microsoft windows : 'CLS'
os.system('clear' if os.name is 'posix' else 'CLS')

BASEPATH = Dir('.').abspath

print '-----------------------------------------------------------------'
print '[YGG]  build ygg target server library and run test,'
print '       on %s.' % BASEPATH
print '-----------------------------------------------------------------'



# build target server library
print '    ======== build target server library'

CPPPATH = [
    '../../ext/include',
    '../../',
  ]

sources = [
    '../../ext/src/gmock_main.cc',
    'base_context.cpp',
    'ctrl_ready.cpp',
    'manager.cpp',
    'target_proxy.cpp',
    'target_ready.cpp',
  ]

env = Environment(CPPPATH=CPPPATH, CXXFLAGS=['-std=c++11', '-g', '-rdynamic'])
lib = env.StaticLibrary(target='targets', source=sources)
env.Install('../../lib', lib)
env.Alias('install', '../lib')



# build and run unittest
print '    ======== build target server unittest'

sources = [
    '../../test/fake.cpp',
    '../../test/vars.cpp',
    'base_context_test.cpp',
    'ctrl_ready_test.cpp',
    'manager_test.cpp',
    'target_proxy_test.cpp',
    'target_ready_test.cpp',
  ]

LIBS = [
    'libboost_system-mt-s',
    'libboost_thread-mt-s',
    'jsoncpp',
    'gtest', 
    'core',
    'targets',
  ]

LIBPATH = [
    '../../ext/lib',
    '../../lib',
    './',
  ]

if os.name == 'posix':
  env.Append(LINKFLAGS=['-pthread'])
test = env.Program(target='test', source=sources, LIBS=LIBS, LIBPATH=LIBPATH)



# run after build complete
print '    ======== run target server unittest'

Command(
  'unittest', 
  test, 
  lambda env, target, source: os.system(source[0].abspath))

