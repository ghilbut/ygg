import os
import sys

# unix, linux, mac  : 'clear'
# microsoft windows : 'CLS'
os.system('clear' if os.name is 'posix' else 'CLS')

BASEPATH = Dir('.').abspath
ROOTPATH = os.path.join(BASEPATH, '..')
ROOTPATH = os.path.abspath(ROOTPATH)
#TESTPATH = os.path.join(BASEPATH, '../test')
#TESTPATH = os.path.abspath(TESTPATH)

sys.path.append(os.path.join(ROOTPATH, 'build/scons'))
import utils

print '-----------------------------------------------------------------'
print '[YGG]  build ygg core library and run test,'
print '       on %s.' % BASEPATH
print '-----------------------------------------------------------------'



# build core library
print '    ======== build core library'

CPPPATH = [
    '../ext/include',
    '../',
  ]

sources = [
    'target_proxy_server.cpp',
  ]

env = Environment(CPPPATH=CPPPATH, CXXFLAGS=['-std=c++11', '-g', '-rdynamic'])
env.StaticLibrary(target='core', source=sources)




# library files to build binary
LIBS = [
    'libboost_system-mt-s',
    'libboost_thread-mt-s',
    'jsoncpp',
    'mongoose',
  ]

LIBPATH = [
    '../ext/lib',
    '../lib',
  ]



# build and run unittest
print '    ======== build core unittest'

if os.name == 'posix':
  env.Append(LINKFLAGS=['-pthread'])

sources = [
    '../ext/src/gmock_main.cc',
    '../test/fake.cpp',
    'target_proxy_server_test.cpp',
  ]

LIBS += [
    'gtest', 
    'codebase',
    'core',
    'net',
  ]

test = env.Program(target='test', source=sources, LIBS=LIBS, LIBPATH=LIBPATH)



# run after build complete
print '    ======== run core unittest'

Command(
  'unittest', 
  test, 
  lambda env, target, source: os.system(source[0].abspath))

