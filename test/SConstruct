import os

# unix, linux, mac  : 'clear'
# microsoft windows : 'CLS'
os.system('clear' if os.name is 'posix' else 'CLS')



# build all 3rd party libraries
SConscript('../../ygg_thirdparty/SConstruct')



kLibRoot = os.path.abspath('../../ygg_thirdparty')

def get_libpath(subpath):
  return os.path.join(kLibRoot, subpath)



CPPPATH = [
  get_libpath('third_party/boost_1_57_0/include'),
  get_libpath('third_party/jsoncpp-1.4.4/include'),
  get_libpath('third_party/mongoose-5.5'),
  get_libpath('third_party/websocketpp-0.5.1'),
  get_libpath('third_party/gmock-1.7.0/gtest/include'),
  get_libpath('third_party/gmock-1.7.0/include'),
  '../']

env = Environment(CPPPATH=CPPPATH, CXXFLAGS="-std=c++11")

if os.name == 'posix':
  env.Append(LINKFLAGS=['-pthread'])



sources = [
  'empty.cpp']
#sources += Glob('../codebase/*_test.c*')
sources += Glob('../codebase/*.c*')
sources += Glob('../net/*.c*')
sources += Glob('../libbox/*.c*')

LIBS = [
  'libboost_system-mt-s',
  'libboost_thread-mt-s',
  'gmock', 'jsoncpp', 'mongoose']

LIBPATH = [
  get_libpath('third_party/boost_1_57_0/lib'),
  get_libpath('gmock'),
  get_libpath('jsoncpp'),
  get_libpath('mongoose')]

test = env.Program(target='test', source=sources, LIBS=LIBS, LIBPATH=LIBPATH)

# run after build complete
Command(
  'unittest', 
  test, 
  lambda env, target, source: os.system(source[0].abspath))
