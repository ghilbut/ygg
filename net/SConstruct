import os

# unix, linux, mac  : 'clear'
# microsoft windows : 'CLS'
os.system('clear' if os.name is 'posix' else 'CLS')

BASEPATH = Dir('.').abspath

print '-----------------------------------------------------------------'
print '[YGG]  build ygg net library and run test,'
print '       on %s.' % BASEPATH
print '-----------------------------------------------------------------'



# build net library
print '    ======== build net library'

CPPPATH = [
    '../ext/include',
    '../',
  ]

env = Environment(CPPPATH=CPPPATH, CXXFLAGS=['-std=c++11', '-g', '-rdynamic'])



sources = [
    'connection.cpp',
    'local_connection.cpp',
  ]

lib = env.StaticLibrary(target = 'net', source = sources)
env.Install('../lib', lib)
env.Alias('install', '../lib')



# build and run unittest
print '    ======== build net unittest'

# net
sources = [
    '../ext/src/gmock_main.cc',
    '../test/fake.cpp',
    'connection_test.cpp',
    'local_connection_test.cpp',
  ]

LIBS = [
    'gtest', 
    'libboost_system-mt-s',
    'libboost_thread-mt-s',
    'codebase',
    'net',
  ]

LIBPATH = [
    '../ext/lib',
    '../lib',
  ]

if os.name == 'posix':
  env.Append(LINKFLAGS=['-pthread'])
test = env.Program(target='test', source=sources, LIBS=LIBS, LIBPATH=LIBPATH)



# run after build complete
print '    ======== run net unittest'

Command(
  'unittest', 
  test, 
  lambda env, target, source: os.system(source[0].abspath))

